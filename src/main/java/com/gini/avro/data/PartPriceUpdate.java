/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.gini.avro.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Sample default value */
@org.apache.avro.specific.AvroGenerated
public class PartPriceUpdate extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -2215104590685425313L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PartPriceUpdate\",\"namespace\":\"com.gini.avro.data\",\"doc\":\"Sample default value\",\"fields\":[{\"name\":\"partId\",\"type\":\"string\"},{\"name\":\"partName\",\"type\":\"string\"},{\"name\":\"partNumber\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"price\",\"type\":\"string\"},{\"name\":\"manufacturer\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PartPriceUpdate> ENCODER =
      new BinaryMessageEncoder<PartPriceUpdate>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PartPriceUpdate> DECODER =
      new BinaryMessageDecoder<PartPriceUpdate>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PartPriceUpdate> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PartPriceUpdate> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PartPriceUpdate> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PartPriceUpdate>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PartPriceUpdate to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PartPriceUpdate from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PartPriceUpdate instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PartPriceUpdate fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence partId;
  private java.lang.CharSequence partName;
  private java.lang.CharSequence partNumber;
  private java.lang.CharSequence currency;
  private java.lang.CharSequence price;
  private java.lang.CharSequence manufacturer;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PartPriceUpdate() {}

  /**
   * All-args constructor.
   * @param partId The new value for partId
   * @param partName The new value for partName
   * @param partNumber The new value for partNumber
   * @param currency The new value for currency
   * @param price The new value for price
   * @param manufacturer The new value for manufacturer
   */
  public PartPriceUpdate(java.lang.CharSequence partId, java.lang.CharSequence partName, java.lang.CharSequence partNumber, java.lang.CharSequence currency, java.lang.CharSequence price, java.lang.CharSequence manufacturer) {
    this.partId = partId;
    this.partName = partName;
    this.partNumber = partNumber;
    this.currency = currency;
    this.price = price;
    this.manufacturer = manufacturer;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return partId;
    case 1: return partName;
    case 2: return partNumber;
    case 3: return currency;
    case 4: return price;
    case 5: return manufacturer;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: partId = (java.lang.CharSequence)value$; break;
    case 1: partName = (java.lang.CharSequence)value$; break;
    case 2: partNumber = (java.lang.CharSequence)value$; break;
    case 3: currency = (java.lang.CharSequence)value$; break;
    case 4: price = (java.lang.CharSequence)value$; break;
    case 5: manufacturer = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'partId' field.
   * @return The value of the 'partId' field.
   */
  public java.lang.CharSequence getPartId() {
    return partId;
  }


  /**
   * Sets the value of the 'partId' field.
   * @param value the value to set.
   */
  public void setPartId(java.lang.CharSequence value) {
    this.partId = value;
  }

  /**
   * Gets the value of the 'partName' field.
   * @return The value of the 'partName' field.
   */
  public java.lang.CharSequence getPartName() {
    return partName;
  }


  /**
   * Sets the value of the 'partName' field.
   * @param value the value to set.
   */
  public void setPartName(java.lang.CharSequence value) {
    this.partName = value;
  }

  /**
   * Gets the value of the 'partNumber' field.
   * @return The value of the 'partNumber' field.
   */
  public java.lang.CharSequence getPartNumber() {
    return partNumber;
  }


  /**
   * Sets the value of the 'partNumber' field.
   * @param value the value to set.
   */
  public void setPartNumber(java.lang.CharSequence value) {
    this.partNumber = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.CharSequence getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.CharSequence value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'manufacturer' field.
   * @return The value of the 'manufacturer' field.
   */
  public java.lang.CharSequence getManufacturer() {
    return manufacturer;
  }


  /**
   * Sets the value of the 'manufacturer' field.
   * @param value the value to set.
   */
  public void setManufacturer(java.lang.CharSequence value) {
    this.manufacturer = value;
  }

  /**
   * Creates a new PartPriceUpdate RecordBuilder.
   * @return A new PartPriceUpdate RecordBuilder
   */
  public static com.gini.avro.data.PartPriceUpdate.Builder newBuilder() {
    return new com.gini.avro.data.PartPriceUpdate.Builder();
  }

  /**
   * Creates a new PartPriceUpdate RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PartPriceUpdate RecordBuilder
   */
  public static com.gini.avro.data.PartPriceUpdate.Builder newBuilder(com.gini.avro.data.PartPriceUpdate.Builder other) {
    if (other == null) {
      return new com.gini.avro.data.PartPriceUpdate.Builder();
    } else {
      return new com.gini.avro.data.PartPriceUpdate.Builder(other);
    }
  }

  /**
   * Creates a new PartPriceUpdate RecordBuilder by copying an existing PartPriceUpdate instance.
   * @param other The existing instance to copy.
   * @return A new PartPriceUpdate RecordBuilder
   */
  public static com.gini.avro.data.PartPriceUpdate.Builder newBuilder(com.gini.avro.data.PartPriceUpdate other) {
    if (other == null) {
      return new com.gini.avro.data.PartPriceUpdate.Builder();
    } else {
      return new com.gini.avro.data.PartPriceUpdate.Builder(other);
    }
  }

  /**
   * RecordBuilder for PartPriceUpdate instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PartPriceUpdate>
    implements org.apache.avro.data.RecordBuilder<PartPriceUpdate> {

    private java.lang.CharSequence partId;
    private java.lang.CharSequence partName;
    private java.lang.CharSequence partNumber;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence price;
    private java.lang.CharSequence manufacturer;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.gini.avro.data.PartPriceUpdate.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.partId)) {
        this.partId = data().deepCopy(fields()[0].schema(), other.partId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.partName)) {
        this.partName = data().deepCopy(fields()[1].schema(), other.partName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[2].schema(), other.partNumber);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[5].schema(), other.manufacturer);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PartPriceUpdate instance
     * @param other The existing instance to copy.
     */
    private Builder(com.gini.avro.data.PartPriceUpdate other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.partId)) {
        this.partId = data().deepCopy(fields()[0].schema(), other.partId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.partName)) {
        this.partName = data().deepCopy(fields()[1].schema(), other.partName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.partNumber)) {
        this.partNumber = data().deepCopy(fields()[2].schema(), other.partNumber);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.currency)) {
        this.currency = data().deepCopy(fields()[3].schema(), other.currency);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.price)) {
        this.price = data().deepCopy(fields()[4].schema(), other.price);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.manufacturer)) {
        this.manufacturer = data().deepCopy(fields()[5].schema(), other.manufacturer);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'partId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPartId() {
      return partId;
    }


    /**
      * Sets the value of the 'partId' field.
      * @param value The value of 'partId'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setPartId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.partId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'partId' field has been set.
      * @return True if the 'partId' field has been set, false otherwise.
      */
    public boolean hasPartId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'partId' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearPartId() {
      partId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'partName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPartName() {
      return partName;
    }


    /**
      * Sets the value of the 'partName' field.
      * @param value The value of 'partName'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setPartName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.partName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'partName' field has been set.
      * @return True if the 'partName' field has been set, false otherwise.
      */
    public boolean hasPartName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'partName' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearPartName() {
      partName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'partNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getPartNumber() {
      return partNumber;
    }


    /**
      * Sets the value of the 'partNumber' field.
      * @param value The value of 'partNumber'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setPartNumber(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.partNumber = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'partNumber' field has been set.
      * @return True if the 'partNumber' field has been set, false otherwise.
      */
    public boolean hasPartNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'partNumber' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearPartNumber() {
      partNumber = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.currency = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.CharSequence getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setPrice(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.price = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearPrice() {
      price = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'manufacturer' field.
      * @return The value.
      */
    public java.lang.CharSequence getManufacturer() {
      return manufacturer;
    }


    /**
      * Sets the value of the 'manufacturer' field.
      * @param value The value of 'manufacturer'.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder setManufacturer(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.manufacturer = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'manufacturer' field has been set.
      * @return True if the 'manufacturer' field has been set, false otherwise.
      */
    public boolean hasManufacturer() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'manufacturer' field.
      * @return This builder.
      */
    public com.gini.avro.data.PartPriceUpdate.Builder clearManufacturer() {
      manufacturer = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PartPriceUpdate build() {
      try {
        PartPriceUpdate record = new PartPriceUpdate();
        record.partId = fieldSetFlags()[0] ? this.partId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.partName = fieldSetFlags()[1] ? this.partName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.partNumber = fieldSetFlags()[2] ? this.partNumber : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.currency = fieldSetFlags()[3] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.price = fieldSetFlags()[4] ? this.price : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.manufacturer = fieldSetFlags()[5] ? this.manufacturer : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PartPriceUpdate>
    WRITER$ = (org.apache.avro.io.DatumWriter<PartPriceUpdate>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PartPriceUpdate>
    READER$ = (org.apache.avro.io.DatumReader<PartPriceUpdate>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.partId);

    out.writeString(this.partName);

    out.writeString(this.partNumber);

    out.writeString(this.currency);

    out.writeString(this.price);

    if (this.manufacturer == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.manufacturer);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.partId = in.readString(this.partId instanceof Utf8 ? (Utf8)this.partId : null);

      this.partName = in.readString(this.partName instanceof Utf8 ? (Utf8)this.partName : null);

      this.partNumber = in.readString(this.partNumber instanceof Utf8 ? (Utf8)this.partNumber : null);

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);

      if (in.readIndex() != 1) {
        in.readNull();
        this.manufacturer = null;
      } else {
        this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);
      }

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.partId = in.readString(this.partId instanceof Utf8 ? (Utf8)this.partId : null);
          break;

        case 1:
          this.partName = in.readString(this.partName instanceof Utf8 ? (Utf8)this.partName : null);
          break;

        case 2:
          this.partNumber = in.readString(this.partNumber instanceof Utf8 ? (Utf8)this.partNumber : null);
          break;

        case 3:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 4:
          this.price = in.readString(this.price instanceof Utf8 ? (Utf8)this.price : null);
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.manufacturer = null;
          } else {
            this.manufacturer = in.readString(this.manufacturer instanceof Utf8 ? (Utf8)this.manufacturer : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










